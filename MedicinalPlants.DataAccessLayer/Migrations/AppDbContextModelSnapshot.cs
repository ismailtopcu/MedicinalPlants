// <auto-generated />
using MedicinalPlants.DataAccessLayer.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicinalPlants.DataAccessLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MedicinalPlants.EntityLayer.Concrete.Ailment", b =>
                {
                    b.Property<int>("AilmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AilmentId"), 1L, 1);

                    b.Property<string>("AilmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AilmentId");

                    b.ToTable("Ailments");
                });

            modelBuilder.Entity("MedicinalPlants.EntityLayer.Concrete.Plant", b =>
                {
                    b.Property<int>("PlantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlantId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlantImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlantId");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("MedicinalPlants.EntityLayer.Concrete.PlantAilment", b =>
                {
                    b.Property<int>("PlantAilmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlantAilmentId"), 1L, 1);

                    b.Property<int>("AilmentId")
                        .HasColumnType("int");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.HasKey("PlantAilmentId");

                    b.HasIndex("AilmentId");

                    b.HasIndex("PlantId");

                    b.ToTable("PlantAilments");
                });

            modelBuilder.Entity("MedicinalPlants.EntityLayer.Concrete.PlantAilment", b =>
                {
                    b.HasOne("MedicinalPlants.EntityLayer.Concrete.Ailment", "Ailment")
                        .WithMany()
                        .HasForeignKey("AilmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicinalPlants.EntityLayer.Concrete.Plant", "Plant")
                        .WithMany()
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ailment");

                    b.Navigation("Plant");
                });
#pragma warning restore 612, 618
        }
    }
}
